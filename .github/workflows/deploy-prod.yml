name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
    inputs:
      tag:
        description: 'Image tag'
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.get_tag.outputs.tag }}
      repo_name: ${{ steps.repo_name.outputs.name }}
      app_name: ${{ steps.app_name.outputs.name }}
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Repository Name
        id: repo_name
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set App Name
        id: app_name
        run: |
          echo "name=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: Get Image Tag
        id: get_tag
        run: |
          TAG=${{ github.event.inputs.tag }}
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG=$(date +'%Y%m%d')-${GITHUB_SHA::7}
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Verify Image Exists
        run: |
          IMAGE="ghcr.io/${{ steps.repo_name.outputs.name }}:${{ steps.get_tag.outputs.tag }}"
          
          echo "üîç Verifying image: $IMAGE"
          
          if ! docker pull $IMAGE >/dev/null 2>&1; then
            echo "‚ùå Error: Image $IMAGE not found in registry"
            echo "Please ensure the image was built and pushed successfully in the development pipeline"
            exit 1
          fi
          
          echo "‚úÖ Image verification successful"
  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    environment: production
    outputs:
      route_host: ${{ steps.route_host.outputs.name }}
    steps:
      - uses: actions/checkout@v3

      - name: Set App Name
        id: app_name
        run: |
          echo "name=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')" >> $GITHUB_OUTPUT

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
          tar -xvf openshift-client-linux.tar.gz -C /usr/local/bin
          chmod +x /usr/local/bin/oc

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Login to OpenShift
        run: |
          oc login --token=${{ secrets.OSC_PROD_TOKEN }} --server=${{ secrets.OSC_SERVER }}

      - name: Clone Platform Config
        uses: actions/checkout@v3
        with:
          repository: PTSS-Support/platform-config
          path: platform-config
          token: ${{ secrets.PLATFORM_CONFIG_PAT }}

      - name: Apply Platform Configs
        run: |
          NAMESPACE=${{ vars.OSC_PROD_PROJECT }}
          
          # Apply common configs
          for config_type in configmaps secrets; do
            for path in \
              "platform-config/common/${config_type}" \
              "platform-config/apps/${{ steps.app_name.outputs.name }}/${config_type}" \
              "platform-config/environments/prod/common/${config_type}" \
              "platform-config/environments/prod/apps/${{ steps.app_name.outputs.name }}/${config_type}"; do
                if [ -d "${path}" ] && [ "$(ls -A ${path})" ]; then
                  oc apply -f "${path}" -n ${NAMESPACE}
                fi
            done
          done

      - name: Set Route Host
        id: route_host
        run: |
          ROUTE_HOST="${{ steps.app_name.outputs.name }}-prod.${{ vars.APPS_DOMAIN }}"
          echo "name=${ROUTE_HOST}" >> $GITHUB_OUTPUT

      - name: Deploy to OpenShift Prod
        run: |
          helm upgrade --install ${{ steps.app_name.outputs.name }} ./helm \
            --namespace ${{ vars.OSC_PROD_PROJECT }} \
            --values ./helm/values-prod.yaml \
            --set image.registry=ghcr.io \
            --set image.repository=${{ needs.prepare.outputs.repo_name }} \
            --set image.tag=${{ needs.prepare.outputs.image_tag }} \
            --set route.host=${{ steps.route_host.outputs.name  }}

      - name: Wait for Deployment
        run: |
          oc rollout status deployment/${{ steps.app_name.outputs.name }} -n ${{ vars.OSC_PROD_PROJECT }} --timeout=150s

      - name: Verify Deployment
        run: |
          # Check if all pods are ready
          READY_PODS=$(oc get deployment ${{ steps.app_name.outputs.name }} -n ${{ vars.OSC_PROD_PROJECT }} -o jsonpath='{.status.readyReplicas}')
          DESIRED_PODS=$(oc get deployment ${{ steps.app_name.outputs.name }} -n ${{ vars.OSC_PROD_PROJECT }} -o jsonpath='{.spec.replicas}')
          
          if [ "$READY_PODS" != "$DESIRED_PODS" ]; then
            echo "‚ùå Deployment verification failed: $READY_PODS/$DESIRED_PODS pods ready"
            exit 1
          fi

          echo "‚úÖ Deployment verification successful: $READY_PODS/$DESIRED_PODS pods ready"

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install k6
        run: |
          wget https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz
          tar -xzf k6-v0.46.0-linux-amd64.tar.gz
          sudo cp k6-v0.46.0-linux-amd64/k6 /usr/local/bin/
          k6 version

      - name: Run k6 Performance Tests
        run: |
          ROUTE_HOST=${{ needs.deploy.outputs.route_host }} k6 run tests/k6/*.js

      - name: Run E2E Tests
        run: |
          echo "TODO: Add E2E tests using your preferred testing framework"
          echo "These tests should run against the newly deployed prod environment"